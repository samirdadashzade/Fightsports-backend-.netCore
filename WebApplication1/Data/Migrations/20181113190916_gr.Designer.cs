// <auto-generated />
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage;
using Microsoft.EntityFrameworkCore.Storage.Internal;
using System;
using WebApplication1.Data;

namespace WebApplication1.Data.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20181113190916_gr")]
    partial class gr
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.0.3-rtm-10026")
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken();

                    b.Property<string>("Name")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("ClaimType");

                    b.Property<string>("ClaimValue");

                    b.Property<string>("RoleId")
                        .IsRequired();

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("ClaimType");

                    b.Property<string>("ClaimValue");

                    b.Property<string>("UserId")
                        .IsRequired();

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider");

                    b.Property<string>("ProviderKey");

                    b.Property<string>("ProviderDisplayName");

                    b.Property<string>("UserId")
                        .IsRequired();

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId");

                    b.Property<string>("RoleId");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId");

                    b.Property<string>("LoginProvider");

                    b.Property<string>("Name");

                    b.Property<string>("Value");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens");
                });

            modelBuilder.Entity("WebApplication1.Models.ApplicationUser", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("AccessFailedCount");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken();

                    b.Property<string>("Email")
                        .HasMaxLength(256);

                    b.Property<bool>("EmailConfirmed");

                    b.Property<bool>("LockoutEnabled");

                    b.Property<DateTimeOffset?>("LockoutEnd");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256);

                    b.Property<string>("PasswordHash");

                    b.Property<string>("PhoneNumber");

                    b.Property<bool>("PhoneNumberConfirmed");

                    b.Property<string>("SecurityStamp");

                    b.Property<bool>("TwoFactorEnabled");

                    b.Property<string>("UserName")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers");
                });

            modelBuilder.Entity("WebApplication1.Models.Banners", b =>
                {
                    b.Property<int>("BannerId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("banner_id");

                    b.Property<string>("BannerPath")
                        .IsRequired()
                        .HasColumnName("banner_path");

                    b.Property<string>("CustumerName")
                        .HasColumnName("custumer_name")
                        .HasMaxLength(50);

                    b.HasKey("BannerId");

                    b.ToTable("banners");
                });

            modelBuilder.Entity("WebApplication1.Models.Comments", b =>
                {
                    b.Property<int>("CommentId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("comment_id");

                    b.Property<string>("AbstractCommentType")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnName("abstract_comment_type")
                        .HasDefaultValueSql("(N'')")
                        .HasMaxLength(50);

                    b.Property<string>("AuthorName")
                        .IsRequired()
                        .HasColumnName("author_name")
                        .HasMaxLength(50);

                    b.Property<string>("CommentDate")
                        .HasColumnName("comment_date")
                        .HasMaxLength(50);

                    b.Property<string>("CommentTxt")
                        .IsRequired()
                        .HasColumnName("comment_txt");

                    b.Property<int?>("MelumatId")
                        .HasColumnName("melumat_id");

                    b.Property<int?>("NewsId")
                        .HasColumnName("news_id");

                    b.HasKey("CommentId");

                    b.HasIndex("MelumatId");

                    b.HasIndex("NewsId");

                    b.ToTable("comments");
                });

            modelBuilder.Entity("WebApplication1.Models.LiveTv", b =>
                {
                    b.Property<int>("LiveTvId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("live_tv_id");

                    b.Property<string>("LivePath")
                        .HasColumnName("live_path");

                    b.Property<string>("LivePhotoPath")
                        .IsRequired()
                        .HasColumnName("live_photo_path");

                    b.Property<string>("LiveTitle")
                        .HasColumnName("live_title")
                        .HasMaxLength(50);

                    b.HasKey("LiveTvId");

                    b.ToTable("live_tv");
                });

            modelBuilder.Entity("WebApplication1.Models.Magazine", b =>
                {
                    b.Property<int>("MagazineId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("magazine_id");

                    b.Property<string>("MagazineAdress")
                        .HasColumnName("magazine_adress");

                    b.Property<string>("MagazineFifthPhotoPath")
                        .HasColumnName("magazine_fifth_photo_path");

                    b.Property<string>("MagazineFirstPhotoPath")
                        .IsRequired()
                        .HasColumnName("magazine_first_photo_path");

                    b.Property<string>("MagazineFourthPhotoPath")
                        .HasColumnName("magazine_fourth_photo_path");

                    b.Property<string>("MagazineLatitude")
                        .HasColumnName("magazine_latitude")
                        .HasMaxLength(50);

                    b.Property<string>("MagazineLongitude")
                        .HasColumnName("magazine_longitude")
                        .HasMaxLength(50);

                    b.Property<string>("MagazineSecondPhotoPath")
                        .HasColumnName("magazine_second_photo_path");

                    b.Property<string>("MagazineThirdPhotoPath")
                        .HasColumnName("magazine_third_photo_path");

                    b.Property<string>("ProductName")
                        .HasColumnName("product_name")
                        .HasMaxLength(50);

                    b.Property<string>("ProductPrice")
                        .HasColumnName("product_price");

                    b.Property<string>("ProductTitle")
                        .HasColumnName("product_title")
                        .HasMaxLength(50);

                    b.Property<string>("ProductTxt")
                        .HasColumnName("product_txt");

                    b.Property<int>("SportCategoryId")
                        .HasColumnName("sport_category_id");

                    b.HasKey("MagazineId");

                    b.HasIndex("SportCategoryId");

                    b.ToTable("magazine");
                });

            modelBuilder.Entity("WebApplication1.Models.Melumat", b =>
                {
                    b.Property<int>("MelumatId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("melumat_id");

                    b.Property<string>("MelumatAdress")
                        .HasColumnName("melumat_adress")
                        .HasMaxLength(50);

                    b.Property<string>("MelumatPhotoPath")
                        .HasColumnName("melumat_photo_path");

                    b.Property<string>("MelumatTxt")
                        .HasColumnName("melumat_txt");

                    b.Property<int?>("SportCategoryId")
                        .HasColumnName("sport_category_id");

                    b.HasKey("MelumatId");

                    b.HasIndex("SportCategoryId");

                    b.ToTable("Melumat");
                });

            modelBuilder.Entity("WebApplication1.Models.News", b =>
                {
                    b.Property<int>("NewsId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("news_id");

                    b.Property<string>("NewsAddedDate")
                        .HasColumnName("news_added_date")
                        .HasMaxLength(50);

                    b.Property<string>("NewsBigTitle")
                        .HasColumnName("news_big_title");

                    b.Property<string>("NewsFirstPhotoPath")
                        .HasColumnName("news_first_photo_path");

                    b.Property<string>("NewsFirstVideoPath")
                        .HasColumnName("news_first_video_path");

                    b.Property<string>("NewsName")
                        .HasColumnName("news_name")
                        .HasMaxLength(50);

                    b.Property<string>("NewsTitle")
                        .IsRequired()
                        .HasColumnName("news_title");

                    b.Property<string>("NewsTxt")
                        .IsRequired()
                        .HasColumnName("news_txt");

                    b.Property<int>("NewsTypeId")
                        .HasColumnName("news_type_id");

                    b.Property<int>("NewsViews")
                        .HasColumnName("news_views");

                    b.Property<string>("OptionalAdress")
                        .HasColumnName("optional_adress")
                        .HasMaxLength(50);

                    b.Property<string>("OptionalLatitude")
                        .HasColumnName("optional_latitude")
                        .HasMaxLength(50);

                    b.Property<string>("OptionalLongitude")
                        .HasColumnName("optional_longitude")
                        .HasMaxLength(50);

                    b.Property<int>("SportCategoryId")
                        .HasColumnName("sport_category_id");

                    b.HasKey("NewsId");

                    b.HasIndex("NewsTypeId");

                    b.HasIndex("SportCategoryId");

                    b.ToTable("news");
                });

            modelBuilder.Entity("WebApplication1.Models.NewsType", b =>
                {
                    b.Property<int>("NewsTypeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("news_type_id");

                    b.Property<string>("NewsTypeName")
                        .IsRequired()
                        .HasColumnName("news_type_name")
                        .HasMaxLength(50);

                    b.HasKey("NewsTypeId");

                    b.ToTable("newsType");
                });

            modelBuilder.Entity("WebApplication1.Models.Photos", b =>
                {
                    b.Property<int>("PhotoId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("photo_id");

                    b.Property<int?>("NewsId")
                        .HasColumnName("news_id");

                    b.Property<string>("PhotoAddedData")
                        .HasColumnName("photo_added_data")
                        .HasMaxLength(50);

                    b.Property<string>("PhotoName")
                        .IsRequired()
                        .HasColumnName("photo_name")
                        .HasMaxLength(50);

                    b.Property<string>("PhotoPath")
                        .IsRequired()
                        .HasColumnName("photo_path");

                    b.Property<string>("PhotoTitle")
                        .IsRequired()
                        .HasColumnName("photo_title")
                        .HasMaxLength(50);

                    b.Property<int?>("PhotoViews")
                        .HasColumnName("photo_views");

                    b.HasKey("PhotoId");

                    b.HasIndex("NewsId");

                    b.ToTable("photos");
                });

            modelBuilder.Entity("WebApplication1.Models.SportCategories", b =>
                {
                    b.Property<int>("SportCategoryId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("sport_category_id");

                    b.Property<string>("SportCategoryName")
                        .IsRequired()
                        .HasColumnName("sport_category_name")
                        .HasMaxLength(50);

                    b.HasKey("SportCategoryId");

                    b.ToTable("sportCategories");
                });

            modelBuilder.Entity("WebApplication1.Models.Videos", b =>
                {
                    b.Property<int>("VideoId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("video_id");

                    b.Property<int?>("NewsId")
                        .HasColumnName("news_id");

                    b.Property<string>("VideoAddedDate")
                        .HasColumnName("video_added_date")
                        .HasMaxLength(50);

                    b.Property<string>("VideoName")
                        .IsRequired()
                        .HasColumnName("video_name")
                        .HasMaxLength(50);

                    b.Property<string>("VideoPath")
                        .IsRequired()
                        .HasColumnName("video_path");

                    b.Property<string>("VideoTitle")
                        .IsRequired()
                        .HasColumnName("video_title")
                        .HasMaxLength(50);

                    b.Property<int?>("VideoViews")
                        .HasColumnName("video_views");

                    b.HasKey("VideoId");

                    b.HasIndex("NewsId");

                    b.ToTable("videos");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("WebApplication1.Models.ApplicationUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("WebApplication1.Models.ApplicationUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("WebApplication1.Models.ApplicationUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("WebApplication1.Models.ApplicationUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("WebApplication1.Models.Comments", b =>
                {
                    b.HasOne("WebApplication1.Models.Melumat", "Melumat")
                        .WithMany("Comments")
                        .HasForeignKey("MelumatId")
                        .HasConstraintName("FK_comments_ToTablemalumats");

                    b.HasOne("WebApplication1.Models.News", "News")
                        .WithMany("Comments")
                        .HasForeignKey("NewsId")
                        .HasConstraintName("FK_comments_ToTablenews");
                });

            modelBuilder.Entity("WebApplication1.Models.Magazine", b =>
                {
                    b.HasOne("WebApplication1.Models.SportCategories", "SportCategory")
                        .WithMany("Magazine")
                        .HasForeignKey("SportCategoryId")
                        .HasConstraintName("FK_magazine_ToTablesport_catgory");
                });

            modelBuilder.Entity("WebApplication1.Models.Melumat", b =>
                {
                    b.HasOne("WebApplication1.Models.SportCategories", "SportCategory")
                        .WithMany("Melumat")
                        .HasForeignKey("SportCategoryId")
                        .HasConstraintName("FK_Melumat_ToTable_sport_categories");
                });

            modelBuilder.Entity("WebApplication1.Models.News", b =>
                {
                    b.HasOne("WebApplication1.Models.NewsType", "NewsType")
                        .WithMany("News")
                        .HasForeignKey("NewsTypeId")
                        .HasConstraintName("FK_news_ToTablenews_type");

                    b.HasOne("WebApplication1.Models.SportCategories", "SportCategory")
                        .WithMany("News")
                        .HasForeignKey("SportCategoryId")
                        .HasConstraintName("FK_news_ToTablesport_type");
                });

            modelBuilder.Entity("WebApplication1.Models.Photos", b =>
                {
                    b.HasOne("WebApplication1.Models.News", "News")
                        .WithMany("Photos")
                        .HasForeignKey("NewsId")
                        .HasConstraintName("FK_photos_ToTable_news");
                });

            modelBuilder.Entity("WebApplication1.Models.Videos", b =>
                {
                    b.HasOne("WebApplication1.Models.News", "News")
                        .WithMany("Videos")
                        .HasForeignKey("NewsId")
                        .HasConstraintName("FK_videos_ToTable_news");
                });
#pragma warning restore 612, 618
        }
    }
}
